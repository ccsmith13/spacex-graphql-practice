{"version":3,"sources":["spacexlogo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c0c45ce6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacexlogo.a9b45c8b.png\";","import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success}}){\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission: <span className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success\n                    })}>{ mission_name }</span></h4>\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n\n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function MissionKey() {\n    return(\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 my-2 mr-2 bg-success\" />  = Success\n            </p>\n            <p>\n                <span className=\"px-3 my-2 mr-2 bg-danger\" />  = Failure\n            </p>\n        </div>\n    )\n}","import React, {Component, Fragment} from 'react';\nimport gql from 'graphql-tag';\nimport {Query} from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery { \n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`;\n\nexport class Launches extends Component {\n    render(){\n        return(\n            <Fragment>\n                <h1 className=\"display-4 my-3\">Launches</h1>\n                <MissionKey />\n                <Query query={LAUNCHES_QUERY}>\n                    {\n                    //loading is a boolean, can use this to put a spinner in for loading text\n                        ({ loading, error, data }) => {\n                            if(loading) return <h4>Loading...</h4>\n                            if(error) console.log(error);\n\n\n                            return <Fragment>\n                                {\n                                    data.launches.map(launch => (\n                                        <LaunchItem key={launch.flight_number} launch={launch} />\n                                    ))\n                                }\n                            </Fragment>;\n                        }\n                    }\n                </Query>\n            </Fragment>\n        )\n    }\n};\n\nexport default Launches;","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_success\n            launch_date_local\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`\n\nexport class Launch extends Component {\n    render(){\n        let { flight_number } = this.props.match.params;\n        //above statement will return a string, need to use a number for this to work\n        flight_number = parseInt(flight_number);\n        return(\n            <Fragment>\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n                    {\n                        //can add in a loading animation with 'loading' boolean here \n                        ({ loading, error, data }) => {\n                            if(loading) return <h4>Loading...</h4>\n                            if(error) console.log(error);\n\n                            const { mission_name, flight_number, launch_year, launch_success, rocket:{\n                                rocket_id, rocket_name, rocket_type}} = data.launch;\n\n                            return(\n                                <div>\n                                    <h1 className=\"display-4 my-3\">\n                                        <span className=\"text-dark\">Mission: {mission_name}</span>\n                                    </h1>\n                                    <h4 className=\"mb-3\">Launch Details</h4>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">\n                                            Flight Number: {flight_number}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Launch Year: {launch_year}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Launch Successful: <span className={classNames({\n                                                'text-success': launch_success,\n                                                'text-danger': !launch_success\n                                            })}\n                                            >\n                                            {launch_success ? 'Yes' : 'No'}</span>\n                                        </li>\n                                    </ul>\n\n                                    <h4 className=\"my-3\">Rocket Details</h4>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                                        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                                        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n                                    </ul>\n                                    <hr/>\n                                    <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n                                </div>\n                            );\n                        }\n                    }\n                </Query>\n            </Fragment>\n        )\n    }\n};\n\nexport default Launch;","import React, {Component} from 'react';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport './App.css';\nimport logo from './spacexlogo.png';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render () {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src={logo} alt=\"SpaceX\" style={{ width: 300, display: 'block', margin: 'auto'}} />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}